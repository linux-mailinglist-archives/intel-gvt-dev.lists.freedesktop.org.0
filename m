Return-Path: <intel-gvt-dev-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gvt-dev@lfdr.de
Delivered-To: lists+intel-gvt-dev@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id C6132305FB
	for <lists+intel-gvt-dev@lfdr.de>; Fri, 31 May 2019 02:53:02 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 8F8CB6E181;
	Fri, 31 May 2019 00:53:01 +0000 (UTC)
X-Original-To: intel-gvt-dev@lists.freedesktop.org
Delivered-To: intel-gvt-dev@lists.freedesktop.org
Received: from mga14.intel.com (mga14.intel.com [192.55.52.115])
 by gabe.freedesktop.org (Postfix) with ESMTPS id A0D276E181
 for <intel-gvt-dev@lists.freedesktop.org>;
 Fri, 31 May 2019 00:53:00 +0000 (UTC)
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga007.fm.intel.com ([10.253.24.52])
 by fmsmga103.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 30 May 2019 17:53:00 -0700
X-ExtLoop1: 1
Received: from joy-optiplex-7040.sh.intel.com ([10.239.13.9])
 by fmsmga007.fm.intel.com with ESMTP; 30 May 2019 17:52:55 -0700
From: Yan Zhao <yan.y.zhao@intel.com>
To: intel-gvt-dev@lists.freedesktop.org
Subject: [PATCH v4 2/2] drm/i915/gvt: export migration_version to mdev sysfs
 for Intel vGPU
Date: Thu, 30 May 2019 20:47:08 -0400
Message-Id: <20190531004708.24632-1-yan.y.zhao@intel.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20190531004438.24528-1-yan.y.zhao@intel.com>
References: <20190531004438.24528-1-yan.y.zhao@intel.com>
X-BeenThere: intel-gvt-dev@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: "Intel GVT \(Graphics Virtualization\) development list"
 <intel-gvt-dev.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gvt-dev>, 
 <mailto:intel-gvt-dev-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gvt-dev>
List-Post: <mailto:intel-gvt-dev@lists.freedesktop.org>
List-Help: <mailto:intel-gvt-dev-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gvt-dev>, 
 <mailto:intel-gvt-dev-request@lists.freedesktop.org?subject=subscribe>
Cc: cjia@nvidia.com, kvm@vger.kernel.org, aik@ozlabs.ru,
 Zhengxiao.zx@alibaba-inc.com, shuangtai.tst@alibaba-inc.com,
 qemu-devel@nongnu.org, kwankhede@nvidia.com, eauger@redhat.com,
 yi.l.liu@intel.com, eskultet@redhat.com, ziye.yang@intel.com,
 mlevitsk@redhat.com, pasic@linux.ibm.com, libvir-list@redhat.com,
 felipe@nutanix.com, Ken.Xue@amd.com, kevin.tian@intel.com,
 Yan Zhao <yan.y.zhao@intel.com>, dgilbert@redhat.com, zhenyuw@linux.intel.com,
 dinechin@redhat.com, alex.williamson@redhat.com, changpeng.liu@intel.com,
 berrange@redhat.com, cohuck@redhat.com, linux-kernel@vger.kernel.org,
 zhi.a.wang@intel.com, jonathan.davies@nutanix.com, shaopeng.he@intel.com
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gvt-dev-bounces@lists.freedesktop.org
Sender: "intel-gvt-dev" <intel-gvt-dev-bounces@lists.freedesktop.org>

VGhpcyBmZWF0dXJlIGltcGxlbWVudHMgdGhlIG1pZ3JhdGlvbl92ZXJzaW9uIGF0dHJpYnV0ZSBm
b3IgSW50ZWwncyB2R1BVCm1kZXYgZGV2aWNlcy4KCm1pZ3JhdGlvbl92ZXJzaW9uIGF0dHJpYnV0
ZSBpcyBydy4KSXQncyB1c2VkIHRvIGNoZWNrIG1pZ3JhdGlvbiBjb21wYXRpYmlsaXR5IGZvciB0
d28gbWRldiBkZXZpY2VzIG9mIHRoZQpzYW1lIG1kZXYgdHlwZS4KbWlncmF0aW9uX3ZlcnNpb24g
c3RyaW5nIGlzIGRlZmluZWQgYnkgdmVuZG9yIGRyaXZlciBhbmQgb3BhcXVlIHRvCnVzZXJzcGFj
ZS4KCkZvciBJbnRlbCB2R1BVIG9mIGdlbjggYW5kIGdlbjksIHRoZSBmb3JtYXQgb2YgbWlncmF0
aW9uX3ZlcnNpb24gc3RyaW5nCmlzOgogIDx2ZW5kb3IgaWQ+LTxkZXZpY2UgaWQ+LTx2Z3B1IHR5
cGU+LTxzb2Z0d2FyZSB2ZXJzaW9uPi4KCkZvciBmdXR1cmUgcGxhdGZvcm1zLCB0aGUgZm9ybWF0
IG9mIG1pZ3JhdGlvbl92ZXJzaW9uIHN0cmluZyBpcyB0byBiZQpleHBhbmRlZCB0byBpbmNsdWRl
IG1vcmUgbWV0YSBkYXRhIHRvIGlkZW50aWZ5IEludGVsIHZHUFVzIGZvciBsaXZlCm1pZ3JhdGlv
biBjb21wYXRpYmlsaXR5IGNoZWNrCgpGb3Igb2xkIHBsYXRmb3JtcywgYW5kIGZvciBHVlQgbm90
IHN1cHBvcnRpbmcgdkdQVSBsaXZlIG1pZ3JhdGlvbgpmZWF0dXJlLCAtRU5PREVWIGlzIHJldHVy
bmVkIG9uIHJlYWQoMikvd3JpdGUoMikgb2YgbWlncmF0aW9uX3ZlcnNpb24KYXR0cmlidXRlLgpG
b3IgdkdQVXMgcnVubmluZyBvbGQgR1ZUIHdobyBkbyBub3QgZXhwb3NlIG1pZ3JhdGlvbl92ZXJz
aW9uCmF0dHJpYnV0ZSwgbGl2ZSBtaWdyYXRpb24gaXMgcmVnYXJkZWQgYXMgbm90IHN1cHBvcnRl
ZCBmb3IgdGhvc2UgdkdQVXMuCgpDYzogQWxleCBXaWxsaWFtc29uIDxhbGV4LndpbGxpYW1zb25A
cmVkaGF0LmNvbT4KQ2M6IEVyaWsgU2t1bHRldHkgPGVza3VsdGV0QHJlZGhhdC5jb20+CkNjOiAi
RHIuIERhdmlkIEFsYW4gR2lsYmVydCIgPGRnaWxiZXJ0QHJlZGhhdC5jb20+CkNjOiBDb3JuZWxp
YSBIdWNrIDxjb2h1Y2tAcmVkaGF0LmNvbT4KQ2M6ICJUaWFuLCBLZXZpbiIgPGtldmluLnRpYW5A
aW50ZWwuY29tPgpDYzogWmhlbnl1IFdhbmcgPHpoZW55dXdAbGludXguaW50ZWwuY29tPgpDYzog
IldhbmcsIFpoaSBBIiA8emhpLmEud2FuZ0BpbnRlbC5jb20+CmM6IE5lbyBKaWEgPGNqaWFAbnZp
ZGlhLmNvbT4KQ2M6IEtpcnRpIFdhbmtoZWRlIDxrd2Fua2hlZGVAbnZpZGlhLmNvbT4KClNpZ25l
ZC1vZmYtYnk6IFlhbiBaaGFvIDx5YW4ueS56aGFvQGludGVsLmNvbT4KQWNrZWQtYnk6IENvcm5l
bGlhIEh1Y2sgPGNvaHVja0ByZWRoYXQuY29tPgpBY2tlZC1ieTogWmhlbnl1IFdhbmcgPHpoZW55
dXdAbGludXguaW50ZWwuY29tPgoKLS0tCnY0OgoxLiBmaXhlZCBJbmRlbnRhdGlvbi9zcGVsbCBp
c3N1ZXMgYW5kIHJld29yZGVkIHNldmVyYWwgZXJyb3IgbWVzc2FnZXMKKENvcm5lbGlhIEh1Y2sp
CjIuIGFkZGVkIGtmcmVlKHZlcnNpb24pIGluIHNucHJpbnRmIGZhaWx1cmUgY2FzZSAoWmhlbnl1
IFdhbmcpCgp2MzoKMS4gcmVuYW1lZCB2ZXJzaW9uIHRvIG1pZ3JhdGlvbl92ZXJzaW9uCihDaHJp
c3RvcGhlIGRlIERpbmVjaGluLCBDb3JuZWxpYSBIdWNrLCBBbGV4IFdpbGxpYW1zb24pCjIuIGlu
c3RlYWQgb2YgZ2VuZXJhdGluZyBtaWdyYXRpb24gdmVyc2lvbiBzdHJpbmdzIGVhY2ggdGltZSwg
c3RvcmluZwp0aGVtIGluIHZncHUgdHlwZXMgZ2VuZXJhdGVkIGR1cmluZyBpbml0aWFsaXphdGlv
bi4KKFpoZW55dSBXYW5nLCBDb3JuZWxpYSBIdWNrKQozLiByZXBsYWNlZCBtdWx0aXBsZSBzbnBy
aW50ZiB0byBvbmUgYmlnIHNucHJpbnRmIGluCmludGVsX2d2dF9nZXRfdmZpb19taWdyYXRpb25f
dmVyc2lvbigpCihEci4gRGF2aWQgQWxhbiBHaWxiZXJ0KQo0LiBwcmludGVkIGRldGFpbGVkIGVy
cm9yIGxvZwooQWxleCBXaWxsaWFtc29uLCBFcmlrIFNrdWx0ZXR5LCBDb3JuZWxpYSBIdWNrLCBE
ci4gRGF2aWQgQWxhbiBHaWxiZXJ0KQo1LiBpbmNvcnBvcmF0ZWQgPHNvZnR3YXJlIHZlcnNpb24+
IGludG8gbWlncmF0aW9uX3ZlcnNpb24gc3RyaW5nCihBbGV4IFdpbGxpYW1zb24pCjYuIGRvIG5v
dCB1c2UgaWZuZGVmIG1hY3JvIHRvIHN3aXRjaCBvZmYgbWlncmF0aW9uX3ZlcnNpb24gYXR0cmli
dXRlCihaaGVueXUgV2FuZykKCnYyOgoxLiByZW1vdmVkIDMyIGNvbW1vbiBwYXJ0IG9mIHZlcnNp
b24gc3RyaW5nCihBbGV4IFdpbGxpYW1zb24pCjIuIGRvIG5vdCByZWdpc3RlciB2ZXJzaW9uIGF0
dHJpYnV0ZSBmb3IgR1ZUIG5vdCBzdXBwb3J0aW5nIGxpdmUKbWlncmF0aW9uLihDb3JuZWxpYSBI
dWNrKQozLiBmb3IgcGxhdGZvcm1zIG91dCBvZiBnZW44LCBnZW45LCByZXR1cm4gLUVJTlZBTCAt
LT4gLUVOT0RFViBmb3IKaW5jb21wYXRpYmxlLiAoQ29ybmVsaWEgSHVjaykKLS0tCiBkcml2ZXJz
L2dwdS9kcm0vaTkxNS9ndnQvTWFrZWZpbGUgICAgICAgICAgICB8ICAgMiArLQogZHJpdmVycy9n
cHUvZHJtL2k5MTUvZ3Z0L2d2dC5jICAgICAgICAgICAgICAgfCAgMzkgKysrKysKIGRyaXZlcnMv
Z3B1L2RybS9pOTE1L2d2dC9ndnQuaCAgICAgICAgICAgICAgIHwgICA1ICsKIGRyaXZlcnMvZ3B1
L2RybS9pOTE1L2d2dC9taWdyYXRpb25fdmVyc2lvbi5jIHwgMTcwICsrKysrKysrKysrKysrKysr
KysKIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2d2dC92Z3B1LmMgICAgICAgICAgICAgIHwgIDEzICst
CiA1IGZpbGVzIGNoYW5nZWQsIDIyNiBpbnNlcnRpb25zKCspLCAzIGRlbGV0aW9ucygtKQogY3Jl
YXRlIG1vZGUgMTAwNjQ0IGRyaXZlcnMvZ3B1L2RybS9pOTE1L2d2dC9taWdyYXRpb25fdmVyc2lv
bi5jCgpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3Z0L01ha2VmaWxlIGIvZHJp
dmVycy9ncHUvZHJtL2k5MTUvZ3Z0L01ha2VmaWxlCmluZGV4IGVhODMyNGFiYzc4NC4uYTQxNDM1
MTBlYTIyIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndnQvTWFrZWZpbGUKKysr
IGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3Z0L01ha2VmaWxlCkBAIC0zLDcgKzMsNyBAQCBHVlRf
RElSIDo9IGd2dAogR1ZUX1NPVVJDRSA6PSBndnQubyBhcGVydHVyZV9nbS5vIGhhbmRsZXJzLm8g
dmdwdS5vIHRyYWNlX3BvaW50cy5vIGZpcm13YXJlLm8gXAogCWludGVycnVwdC5vIGd0dC5vIGNm
Z19zcGFjZS5vIG9wcmVnaW9uLm8gbW1pby5vIGRpc3BsYXkubyBlZGlkLm8gXAogCWV4ZWNsaXN0
Lm8gc2NoZWR1bGVyLm8gc2NoZWRfcG9saWN5Lm8gbW1pb19jb250ZXh0Lm8gY21kX3BhcnNlci5v
IGRlYnVnZnMubyBcCi0JZmJfZGVjb2Rlci5vIGRtYWJ1Zi5vIHBhZ2VfdHJhY2subworCWZiX2Rl
Y29kZXIubyBkbWFidWYubyBwYWdlX3RyYWNrLm8gbWlncmF0aW9uX3ZlcnNpb24ubwogCiBjY2Zs
YWdzLXkJCQkJKz0gLUkgJChzcmN0cmVlKS8kKHNyYykgLUkgJChzcmN0cmVlKS8kKHNyYykvJChH
VlRfRElSKS8KIGk5MTUteQkJCQkJKz0gJChhZGRwcmVmaXggJChHVlRfRElSKS8sICQoR1ZUX1NP
VVJDRSkpCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndnQvZ3Z0LmMgYi9kcml2
ZXJzL2dwdS9kcm0vaTkxNS9ndnQvZ3Z0LmMKaW5kZXggNDNmNDI0MjA2MmRkLi4zNWZiM2MyMGVi
MGUgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d2dC9ndnQuYworKysgYi9kcml2
ZXJzL2dwdS9kcm0vaTkxNS9ndnQvZ3Z0LmMKQEAgLTEwNSwxNCArMTA1LDUzIEBAIHN0YXRpYyBz
c2l6ZV90IGRlc2NyaXB0aW9uX3Nob3coc3RydWN0IGtvYmplY3QgKmtvYmosIHN0cnVjdCBkZXZp
Y2UgKmRldiwKIAkJICAgICAgIHR5cGUtPndlaWdodCk7CiB9CiAKK3N0YXRpYyBzc2l6ZV90IG1p
Z3JhdGlvbl92ZXJzaW9uX3Nob3coc3RydWN0IGtvYmplY3QgKmtvYmosIHN0cnVjdCBkZXZpY2Ug
KmRldiwKKwkJCQkJY2hhciAqYnVmKQoreworCXN0cnVjdCBpbnRlbF92Z3B1X3R5cGUgKnR5cGU7
CisJdm9pZCAqZ3Z0ID0ga2Rldl90b19pOTE1KGRldiktPmd2dDsKKworCXR5cGUgPSBpbnRlbF9n
dnRfZmluZF92Z3B1X3R5cGUoZ3Z0LCBrb2JqZWN0X25hbWUoa29iaikpOworCWlmICghdHlwZSB8
fCAhdHlwZS0+bWlncmF0aW9uX3ZlcnNpb24pIHsKKwkJZ3Z0X2VycigiTWlncmF0aW9uIG5vdCBz
dXBwb3J0ZWQgb24gdHlwZSAlcy4gUGxlYXNlIHNlYXJjaCBwcmV2aW91cyBkZXRhaWxlZCBsb2dc
biIsCisJCQkJa29iamVjdF9uYW1lKGtvYmopKTsKKwkJcmV0dXJuIC1FTk9ERVY7CisJfQorCisJ
cmV0dXJuIHNucHJpbnRmKGJ1Ziwgc3RybGVuKHR5cGUtPm1pZ3JhdGlvbl92ZXJzaW9uKSArIDIs
CisJCQkiJXNcbiIsIHR5cGUtPm1pZ3JhdGlvbl92ZXJzaW9uKTsKK30KKworc3RhdGljIHNzaXpl
X3QgbWlncmF0aW9uX3ZlcnNpb25fc3RvcmUoc3RydWN0IGtvYmplY3QgKmtvYmosIHN0cnVjdCBk
ZXZpY2UgKmRldiwKKwkJCQkJY29uc3QgY2hhciAqYnVmLCBzaXplX3QgY291bnQpCit7CisJaW50
IHJldCA9IDA7CisJc3RydWN0IGludGVsX3ZncHVfdHlwZSAqdHlwZTsKKwl2b2lkICpndnQgPSBr
ZGV2X3RvX2k5MTUoZGV2KS0+Z3Z0OworCisJdHlwZSA9IGludGVsX2d2dF9maW5kX3ZncHVfdHlw
ZShndnQsIGtvYmplY3RfbmFtZShrb2JqKSk7CisJaWYgKCF0eXBlIHx8ICF0eXBlLT5taWdyYXRp
b25fdmVyc2lvbikgeworCQlndnRfZXJyKCJNaWdyYXRpb24gbm90IHN1cHBvcnRlZCBvbiB0eXBl
ICVzLiBQbGVhc2Ugc2VhcmNoIHByZXZpb3VzIGRldGFpbGVkIGxvZ1xuIiwKKwkJCQlrb2JqZWN0
X25hbWUoa29iaikpOworCQlyZXR1cm4gLUVOT0RFVjsKKwl9CisKKwlyZXQgPSBpbnRlbF9ndnRf
Y2hlY2tfdmZpb19taWdyYXRpb25fdmVyc2lvbihndnQsCisJCQl0eXBlLT5taWdyYXRpb25fdmVy
c2lvbiwgYnVmKTsKKworCXJldHVybiAocmV0IDwgMCA/IHJldCA6IGNvdW50KTsKK30KKwogc3Rh
dGljIE1ERVZfVFlQRV9BVFRSX1JPKGF2YWlsYWJsZV9pbnN0YW5jZXMpOwogc3RhdGljIE1ERVZf
VFlQRV9BVFRSX1JPKGRldmljZV9hcGkpOwogc3RhdGljIE1ERVZfVFlQRV9BVFRSX1JPKGRlc2Ny
aXB0aW9uKTsKK3N0YXRpYyBNREVWX1RZUEVfQVRUUl9SVyhtaWdyYXRpb25fdmVyc2lvbik7CiAK
IHN0YXRpYyBzdHJ1Y3QgYXR0cmlidXRlICpndnRfdHlwZV9hdHRyc1tdID0gewogCSZtZGV2X3R5
cGVfYXR0cl9hdmFpbGFibGVfaW5zdGFuY2VzLmF0dHIsCiAJJm1kZXZfdHlwZV9hdHRyX2Rldmlj
ZV9hcGkuYXR0ciwKIAkmbWRldl90eXBlX2F0dHJfZGVzY3JpcHRpb24uYXR0ciwKKwkmbWRldl90
eXBlX2F0dHJfbWlncmF0aW9uX3ZlcnNpb24uYXR0ciwKIAlOVUxMLAogfTsKIApkaWZmIC0tZ2l0
IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3Z0L2d2dC5oIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUv
Z3Z0L2d2dC5oCmluZGV4IGI1NGYyYmRjMTNhNC4uM2E1NjQzZmZhOTgyIDEwMDY0NAotLS0gYS9k
cml2ZXJzL2dwdS9kcm0vaTkxNS9ndnQvZ3Z0LmgKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUv
Z3Z0L2d2dC5oCkBAIC0yOTYsNiArMjk2LDcgQEAgc3RydWN0IGludGVsX3ZncHVfdHlwZSB7CiAJ
dW5zaWduZWQgaW50IGZlbmNlOwogCXVuc2lnbmVkIGludCB3ZWlnaHQ7CiAJZW51bSBpbnRlbF92
Z3B1X2VkaWQgcmVzb2x1dGlvbjsKKwljaGFyICptaWdyYXRpb25fdmVyc2lvbjsKIH07CiAKIHN0
cnVjdCBpbnRlbF9ndnQgewpAQCAtNjg3LDYgKzY4OCwxMCBAQCB2b2lkIGludGVsX2d2dF9kZWJ1
Z2ZzX3JlbW92ZV92Z3B1KHN0cnVjdCBpbnRlbF92Z3B1ICp2Z3B1KTsKIGludCBpbnRlbF9ndnRf
ZGVidWdmc19pbml0KHN0cnVjdCBpbnRlbF9ndnQgKmd2dCk7CiB2b2lkIGludGVsX2d2dF9kZWJ1
Z2ZzX2NsZWFuKHN0cnVjdCBpbnRlbF9ndnQgKmd2dCk7CiAKK3NzaXplX3QgaW50ZWxfZ3Z0X2No
ZWNrX3ZmaW9fbWlncmF0aW9uX3ZlcnNpb24oc3RydWN0IGludGVsX2d2dCAqZ3Z0LAorCQljb25z
dCBjaGFyICpzZWxmLCBjb25zdCBjaGFyICpyZW1vdGUpOworY2hhciAqaW50ZWxfZ3Z0X2dldF92
ZmlvX21pZ3JhdGlvbl92ZXJzaW9uKHN0cnVjdCBpbnRlbF9ndnQgKmd2dCwKKwkJY29uc3QgY2hh
ciAqdmdwdV90eXBlKTsKIAogI2luY2x1ZGUgInRyYWNlLmgiCiAjaW5jbHVkZSAibXB0LmgiCmRp
ZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndnQvbWlncmF0aW9uX3ZlcnNpb24uYyBi
L2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d2dC9taWdyYXRpb25fdmVyc2lvbi5jCm5ldyBmaWxlIG1v
ZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAwMDAwMC4uOTdlYmIxMDkzZWE2Ci0tLSAvZGV2L251bGwK
KysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3Z0L21pZ3JhdGlvbl92ZXJzaW9uLmMKQEAgLTAs
MCArMSwxNzAgQEAKKy8qCisgKiBDb3B5cmlnaHQoYykgMjAxMS0yMDE3IEludGVsIENvcnBvcmF0
aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLgorICoKKyAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdy
YW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCisgKiBjb3B5
IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhl
ICJTb2Z0d2FyZSIpLAorICogdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmlj
dGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbgorICogdGhlIHJpZ2h0cyB0byB1c2Us
IGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsCisg
KiBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNv
bnMgdG8gd2hvbSB0aGUKKyAqIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVj
dCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CisgKgorICogVGhlIGFib3ZlIGNvcHlyaWdo
dCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2UgKGluY2x1ZGluZyB0aGUgbmV4dAor
ICogcGFyYWdyYXBoKSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50
aWFsIHBvcnRpb25zIG9mIHRoZQorICogU29mdHdhcmUuCisgKgorICogVEhFIFNPRlRXQVJFIElT
IFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Mg
T1IKKyAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJ
RVMgT0YgTUVSQ0hBTlRBQklMSVRZLAorICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBP
U0UgQU5EIE5PTklORlJJTkdFTUVOVC4gIElOIE5PIEVWRU5UIFNIQUxMCisgKiBUSEUgQVVUSE9S
UyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBP
UiBPVEhFUgorICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwg
VE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKKyAqIE9VVCBPRiBPUiBJTiBDT05ORUNU
SU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhF
CisgKiBTT0ZUV0FSRS4KKyAqCisgKiBBdXRob3JzOgorICogICAgWWFuIFpoYW8gPHlhbi55Lnpo
YW9AaW50ZWwuY29tPgorICovCisjaW5jbHVkZSA8bGludXgvdmZpby5oPgorI2luY2x1ZGUgImk5
MTVfZHJ2LmgiCisjaW5jbHVkZSAiZ3Z0LmgiCisKKyNkZWZpbmUgSU5WX1NPRlRXQVJFX1ZFUlNJ
T04gKC0xVSkKKyNkZWZpbmUgVkVORE9SX0lEX0xFTiAoNCkKKyNkZWZpbmUgREVWSUNFX0lEX0xF
TiAoNCkKKyNkZWZpbmUgVkdQVV9UWVBFX0xFTiAoMTYpCisjZGVmaW5lIFNPRlRXQVJFX1ZFUl9M
RU4gKDgpCisKKy8qIHRvdGFsIGxlbmd0aCBvZiB2ZmlvIG1pZ3JhdGlvbiB2ZXJzaW9uIHN0cmlu
Zy4KKyAqIG5ldmVyIGV4Y2VlZCBsaW1pdCBvZiBQQVRIX01BWCAoNDA5NikKKyAqLworI2RlZmlu
ZSBNSUdSQVRJT05fVkVSU0lPTl9UT1RBTF9MRU4gKFZFTkRPUl9JRF9MRU4gKyBERVZJQ0VfSURf
TEVOICsgXAorCQkJCQlWR1BVX1RZUEVfTEVOICsgU09GVFdBUkVfVkVSX0xFTiArIDQpCisKKyNk
ZWZpbmUgR1ZUX1ZGSU9fTUlHUkFUSU9OX1NPRlRXQVJFX1ZFUlNJT04gSU5WX1NPRlRXQVJFX1ZF
UlNJT04KKworCisjZGVmaW5lIFBSSU5URl9GT1JNQVQgIiUwNHgtJTA0eC0lcy0lMDh4IgorI2Rl
ZmluZSBTQ0FORl9GT1JNQVQgIiV4LSV4LSUxNlteLV0tJXgiCisKK2VudW0gaW5jb21wYXRpYmxl
X3JlYXNvbiB7CisJSVJFQVNPTl9XUk9OR19SRU1PVEVfRk9STUFUID0gMCwKKwlJUkVBU09OX0hB
UkRXQVJFX01JU01BVENILAorCUlSRUFTT05fU09GVFdBUkVfVkVSU0lPTl9NSVNNQVRDSCwKKwlJ
UkVBU09OX1ZHUFVfVFlQRV9NSVNNQVRDSCwKK307CisKK3N0YXRpYyBjb25zdCBjaGFyICpjb25z
dCBpbmNvbXBhdGlibGVfcmVhc29uX3N0cltdID0geworCVtJUkVBU09OX1dST05HX1JFTU9URV9G
T1JNQVRdID0KKwkJIndyb25nIHN0cmluZyBmb3JtYXQuIHByb2JhYmx5IHdyb25nIEdWVCB2ZXJz
aW9uIiwKKwlbSVJFQVNPTl9IQVJEV0FSRV9NSVNNQVRDSF0gPQorCQkicGh5c2ljYWwgZGV2aWNl
IG5vdCBtYXRjaGVkIiwKKwlbSVJFQVNPTl9TT0ZUV0FSRV9WRVJTSU9OX01JU01BVENIXSA9CisJ
CSJtaWdyYXRpb24gc29mdHdhcmUgdmVyc2lvbiBub3QgbWF0Y2hlZCIsCisJW0lSRUFTT05fVkdQ
VV9UWVBFX01JU01BVENIXSA9CisJCSJ2Z3B1IHR5cGUgbm90IG1hdGNoZWQiCit9OworCitzdGF0
aWMgYm9vbCBpc19jb21wYXRpYmxlKGNvbnN0IGNoYXIgKmxvY2FsLCBjb25zdCBjaGFyICpyZW1v
dGUpCit7CisJYm9vbCByZXQ7CisKKwlyZXQgPSBzeXNmc19zdHJlcShsb2NhbCwgcmVtb3RlKTsK
KworCWlmICghcmV0KSB7CisJCWludCB2aWRfbCA9IDAsIGRpZF9sID0gMCwgdmlkX3IgPSAwLCBk
aWRfciA9IDA7CisJCWNoYXIgdHlwZV9sW1ZHUFVfVFlQRV9MRU5dLCB0eXBlX3JbVkdQVV9UWVBF
X0xFTl07CisJCXUzMiBzdl9sID0gMCwgc3ZfciA9IDA7CisJCWludCBybCA9IDAsIHJyID0gMDsK
KwkJZW51bSBpbmNvbXBhdGlibGVfcmVhc29uIHJlYXNvbiA9IElSRUFTT05fV1JPTkdfUkVNT1RF
X0ZPUk1BVDsKKworCQltZW1zZXQodHlwZV9sLCAwLCBzaXplb2YodHlwZV9sKSk7CisJCW1lbXNl
dCh0eXBlX3IsIDAsIHNpemVvZih0eXBlX3IpKTsKKworCQlybCA9IHNzY2FuZihsb2NhbCwgU0NB
TkZfRk9STUFULAorCQkJCSZ2aWRfbCwgJmRpZF9sLCB0eXBlX2wsICZzdl9sKTsKKwkJcnIgPSBz
c2NhbmYocmVtb3RlLCBTQ0FORl9GT1JNQVQsCisJCQkJJnZpZF9yLCAmZGlkX3IsIHR5cGVfciwg
JnN2X3IpOworCisJCWlmIChybCA9PSBycikgeworCQkJaWYgKHZpZF9sICE9IHZpZF9yIHx8IGRp
ZF9sICE9IGRpZF9yKQorCQkJCXJlYXNvbiA9IElSRUFTT05fSEFSRFdBUkVfTUlTTUFUQ0g7CisJ
CQllbHNlIGlmIChzdl9sICE9IHN2X3IpCisJCQkJcmVhc29uID0gSVJFQVNPTl9TT0ZUV0FSRV9W
RVJTSU9OX01JU01BVENIOworCQkJZWxzZSBpZiAoc3RybmNtcCh0eXBlX2wsIHR5cGVfciwgVkdQ
VV9UWVBFX0xFTikpCisJCQkJcmVhc29uID0gSVJFQVNPTl9WR1BVX1RZUEVfTUlTTUFUQ0g7CisJ
CX0KKworCQlndnRfZXJyKCJNaWdyYXRpb24gdmVyc2lvbiBtaXNtYXRjaGVkLiBQb3NzaWJsZSBy
ZWFzb246ICVzLiBMb2NhbCBtaWdyYXRpb24gdmVyc2lvbjolcywgUmVtb3RlIG1pZ3JhdGlvbiB2
ZXJzaW9uOiVzXG4iLAorCQkJCWluY29tcGF0aWJsZV9yZWFzb25fc3RyW3JlYXNvbl0sIGxvY2Fs
LAlyZW1vdGUpOworCisJfQorCXJldHVybiByZXQ7CisKK30KKworCitjaGFyICoKK2ludGVsX2d2
dF9nZXRfdmZpb19taWdyYXRpb25fdmVyc2lvbihzdHJ1Y3QgaW50ZWxfZ3Z0ICpndnQsCisJCWNv
bnN0IGNoYXIgKnZncHVfdHlwZSkKK3sKKwlpbnQgY250ID0gMDsKKwlzdHJ1Y3QgZHJtX2k5MTVf
cHJpdmF0ZSAqZGV2X3ByaXYgPSBndnQtPmRldl9wcml2OworCWNoYXIgKnZlcnNpb24gPSBOVUxM
OworCisJLyogY3VycmVudGx5IG9ubHkgZ2VuOCAmIGdlbjkgYXJlIHN1cHBvcnRlZCAqLworCWlm
ICghSVNfR0VOKGRldl9wcml2LCA4KSAmJiAhSVNfR0VOKGRldl9wcml2LCA5KSkgeworCQlndnRf
ZXJyKCJMb2NhbCBoYXJkd2FyZSBkb2VzIG5vdCBzdXBwb3J0IG1pZ3JhdGlvbiBvbiAlZFxuIiwK
KwkJCQlJTlRFTF9JTkZPKGRldl9wcml2KS0+Z2VuKTsKKwkJcmV0dXJuIE5VTEw7CisJfQorCisJ
aWYgKEdWVF9WRklPX01JR1JBVElPTl9TT0ZUV0FSRV9WRVJTSU9OID09IElOVl9TT0ZUV0FSRV9W
RVJTSU9OKSB7CisJCWd2dF9lcnIoIkxvY2FsIEdWVCBkb2VzIG5vdCBzdXBwb3J0IG1pZ3JhdGlv
blxuIik7CisJCXJldHVybiBOVUxMOworCX0KKworCXZlcnNpb24gPSBremFsbG9jKE1JR1JBVElP
Tl9WRVJTSU9OX1RPVEFMX0xFTiwgR0ZQX0tFUk5FTCk7CisKKwlpZiAodW5saWtlbHkoIXZlcnNp
b24pKSB7CisJCWd2dF9lcnIoImNhbm5vdCBhbGxvY2F0ZSBtZW1vcnkgZm9yIGxvY2FsIG1pZ3Jh
dGlvbiB2ZXJzaW9uICVzXG4iLAorCQkJCXZncHVfdHlwZSk7CisJCXJldHVybiBOVUxMOworCX0K
KworCS8qIHZlbmRvciBpZCArIGRldmljZSBpZCArIHZncHUgdHlwZSArIHNvZnR3YXJlIHZlcnNp
b24gKi8KKwljbnQgPSBzbnByaW50Zih2ZXJzaW9uLCBNSUdSQVRJT05fVkVSU0lPTl9UT1RBTF9M
RU4sIFBSSU5URl9GT1JNQVQsCisJCQlQQ0lfVkVORE9SX0lEX0lOVEVMLAorCQkJSU5URUxfREVW
SUQoZGV2X3ByaXYpLAorCQkJdmdwdV90eXBlLAorCQkJR1ZUX1ZGSU9fTUlHUkFUSU9OX1NPRlRX
QVJFX1ZFUlNJT04pOworCisJaWYgKGNudCkKKwkJcmV0dXJuIHZlcnNpb247CisKKwlndnRfZXJy
KCJjYW5ub3QgZ2VuZXJhdGUgbG9jYWwgbWlncmF0aW9uIHZlcnNpb24gZm9yIHR5cGUgJXNcbiIs
CisJCQl2Z3B1X3R5cGUpOworCWtmcmVlKHZlcnNpb24pOworCXJldHVybiBOVUxMOworfQorCitz
c2l6ZV90IGludGVsX2d2dF9jaGVja192ZmlvX21pZ3JhdGlvbl92ZXJzaW9uKHN0cnVjdCBpbnRl
bF9ndnQgKmd2dCwKKwkJY29uc3QgY2hhciAqc2VsZiwgY29uc3QgY2hhciAqcmVtb3RlKQorewor
CXN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiA9IGd2dC0+ZGV2X3ByaXY7CisKKwkv
KiBjdXJyZW50bHkgb25seSBnZW44ICYgZ2VuOSBhcmUgc3VwcG9ydGVkICovCisJaWYgKCFJU19H
RU4oZGV2X3ByaXYsIDgpICYmICFJU19HRU4oZGV2X3ByaXYsIDkpKSB7CisJCWd2dF9lcnIoIkxv
Y2FsIGhhcmR3YXJlIGRvZXMgbm90IHN1cHBvcnQgbWlncmF0aW9uIG9uICVkXG4iLAorCQkJCUlO
VEVMX0lORk8oZGV2X3ByaXYpLT5nZW4pOworCQlyZXR1cm4gLUVOT0RFVjsKKwl9CisKKwlpZiAo
R1ZUX1ZGSU9fTUlHUkFUSU9OX1NPRlRXQVJFX1ZFUlNJT04gPT0gSU5WX1NPRlRXQVJFX1ZFUlNJ
T04pIHsKKwkJZ3Z0X2VycigiTG9jYWwgR1ZUIGRvZXMgbm90IHN1cHBvcnQgbWlncmF0aW9uXG4i
KTsKKwkJcmV0dXJuIC1FTk9ERVY7CisJfQorCisJaWYgKCFpc19jb21wYXRpYmxlKHNlbGYsIHJl
bW90ZSkpCisJCXJldHVybiAtRUlOVkFMOworCisJcmV0dXJuIDA7Cit9CmRpZmYgLS1naXQgYS9k
cml2ZXJzL2dwdS9kcm0vaTkxNS9ndnQvdmdwdS5jIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3Z0
L3ZncHUuYwppbmRleCA0NGNlM2MyYjlhYzEuLjc2NDJiMjE2NDFiZCAxMDA2NDQKLS0tIGEvZHJp
dmVycy9ncHUvZHJtL2k5MTUvZ3Z0L3ZncHUuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9n
dnQvdmdwdS5jCkBAIC0xNTUsMTMgKzE1NSwxOCBAQCBpbnQgaW50ZWxfZ3Z0X2luaXRfdmdwdV90
eXBlcyhzdHJ1Y3QgaW50ZWxfZ3Z0ICpndnQpCiAJCQlzcHJpbnRmKGd2dC0+dHlwZXNbaV0ubmFt
ZSwgIkdWVGdfVjVfJXMiLAogCQkJCQkJdmdwdV90eXBlc1tpXS5uYW1lKTsKIAotCQlndnRfZGJn
X2NvcmUoInR5cGVbJWRdOiAlcyBhdmFpbCAldSBsb3cgJXUgaGlnaCAldSBmZW5jZSAldSB3ZWln
aHQgJXUgcmVzICVzXG4iLAorCQlndnQtPnR5cGVzW2ldLm1pZ3JhdGlvbl92ZXJzaW9uID0KKwkJ
CWludGVsX2d2dF9nZXRfdmZpb19taWdyYXRpb25fdmVyc2lvbihndnQsCisJCQkJCWd2dC0+dHlw
ZXNbaV0ubmFtZSk7CisJCWd2dF9kYmdfY29yZSgidHlwZVslZF06ICVzIGF2YWlsICV1IGxvdyAl
dSBoaWdoICV1IGZlbmNlICV1IHdlaWdodCAldSByZXMgJXMsIG1pZ3JhdGlvX3ZlcnNpb246JXNc
biIsCiAJCQkgICAgIGksIGd2dC0+dHlwZXNbaV0ubmFtZSwKIAkJCSAgICAgZ3Z0LT50eXBlc1tp
XS5hdmFpbF9pbnN0YW5jZSwKIAkJCSAgICAgZ3Z0LT50eXBlc1tpXS5sb3dfZ21fc2l6ZSwKIAkJ
CSAgICAgZ3Z0LT50eXBlc1tpXS5oaWdoX2dtX3NpemUsIGd2dC0+dHlwZXNbaV0uZmVuY2UsCiAJ
CQkgICAgIGd2dC0+dHlwZXNbaV0ud2VpZ2h0LAotCQkJICAgICB2Z3B1X2VkaWRfc3RyKGd2dC0+
dHlwZXNbaV0ucmVzb2x1dGlvbikpOworCQkJICAgICB2Z3B1X2VkaWRfc3RyKGd2dC0+dHlwZXNb
aV0ucmVzb2x1dGlvbiksCisJCQkgICAgIChndnQtPnR5cGVzW2ldLm1pZ3JhdGlvbl92ZXJzaW9u
ID8KKwkJCSAgICAgZ3Z0LT50eXBlc1tpXS5taWdyYXRpb25fdmVyc2lvbiA6ICJudWxsIikpOwog
CX0KIAogCWd2dC0+bnVtX3R5cGVzID0gaTsKQEAgLTE3MCw2ICsxNzUsMTAgQEAgaW50IGludGVs
X2d2dF9pbml0X3ZncHVfdHlwZXMoc3RydWN0IGludGVsX2d2dCAqZ3Z0KQogCiB2b2lkIGludGVs
X2d2dF9jbGVhbl92Z3B1X3R5cGVzKHN0cnVjdCBpbnRlbF9ndnQgKmd2dCkKIHsKKwlpbnQgaTsK
KworCWZvciAoaSA9IDA7IGkgPCBndnQtPm51bV90eXBlczsgaSsrKQorCQlrZnJlZShndnQtPnR5
cGVzW2ldLm1pZ3JhdGlvbl92ZXJzaW9uKTsKIAlrZnJlZShndnQtPnR5cGVzKTsKIH0KIAotLSAK
Mi4xNy4xCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpp
bnRlbC1ndnQtZGV2IG1haWxpbmcgbGlzdAppbnRlbC1ndnQtZGV2QGxpc3RzLmZyZWVkZXNrdG9w
Lm9yZwpodHRwczovL2xpc3RzLmZyZWVkZXNrdG9wLm9yZy9tYWlsbWFuL2xpc3RpbmZvL2ludGVs
LWd2dC1kZXY=
