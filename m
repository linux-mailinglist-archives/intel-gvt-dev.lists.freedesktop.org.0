Return-Path: <intel-gvt-dev-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gvt-dev@lfdr.de
Delivered-To: lists+intel-gvt-dev@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 46FAA14378
	for <lists+intel-gvt-dev@lfdr.de>; Mon,  6 May 2019 03:56:52 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 137F98924F;
	Mon,  6 May 2019 01:56:51 +0000 (UTC)
X-Original-To: intel-gvt-dev@lists.freedesktop.org
Delivered-To: intel-gvt-dev@lists.freedesktop.org
Received: from mga04.intel.com (mga04.intel.com [192.55.52.120])
 by gabe.freedesktop.org (Postfix) with ESMTPS id D64998924F
 for <intel-gvt-dev@lists.freedesktop.org>;
 Mon,  6 May 2019 01:56:49 +0000 (UTC)
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga006.jf.intel.com ([10.7.209.51])
 by fmsmga104.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 05 May 2019 18:56:49 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.60,435,1549958400"; d="scan'208";a="141618473"
Received: from joy-optiplex-7040.sh.intel.com ([10.239.13.9])
 by orsmga006.jf.intel.com with ESMTP; 05 May 2019 18:56:43 -0700
From: Yan Zhao <yan.y.zhao@intel.com>
To: intel-gvt-dev@lists.freedesktop.org
Subject: [PATCH v2 2/2] drm/i915/gvt: export mdev device version to sysfs for
 Intel vGPU
Date: Sun,  5 May 2019 21:51:02 -0400
Message-Id: <20190506015102.3691-1-yan.y.zhao@intel.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20190506014514.3555-1-yan.y.zhao@intel.com>
References: <20190506014514.3555-1-yan.y.zhao@intel.com>
X-BeenThere: intel-gvt-dev@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: "Intel GVT \(Graphics Virtualization\) development list"
 <intel-gvt-dev.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gvt-dev>, 
 <mailto:intel-gvt-dev-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gvt-dev>
List-Post: <mailto:intel-gvt-dev@lists.freedesktop.org>
List-Help: <mailto:intel-gvt-dev-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gvt-dev>, 
 <mailto:intel-gvt-dev-request@lists.freedesktop.org?subject=subscribe>
Cc: cjia@nvidia.com, kvm@vger.kernel.org, aik@ozlabs.ru,
 Zhengxiao.zx@alibaba-inc.com, shuangtai.tst@alibaba-inc.com,
 qemu-devel@nongnu.org, kwankhede@nvidia.com, eauger@redhat.com,
 yi.l.liu@intel.com, eskultet@redhat.com, ziye.yang@intel.com,
 mlevitsk@redhat.com, pasic@linux.ibm.com, libvir-list@redhat.com,
 arei.gonglei@huawei.com, felipe@nutanix.com, Ken.Xue@amd.com,
 kevin.tian@intel.com, Yan Zhao <yan.y.zhao@intel.com>, dgilbert@redhat.com,
 zhenyuw@linux.intel.com, dinechin@redhat.com, alex.williamson@redhat.com,
 changpeng.liu@intel.com, berrange@redhat.com, cohuck@redhat.com,
 linux-kernel@vger.kernel.org, zhi.a.wang@intel.com,
 jonathan.davies@nutanix.com, shaopeng.he@intel.com
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gvt-dev-bounces@lists.freedesktop.org
Sender: "intel-gvt-dev" <intel-gvt-dev-bounces@lists.freedesktop.org>

VGhpcyBmZWF0dXJlIGltcGxlbWVudHMgdGhlIHZlcnNpb24gYXR0cmlidXRlIGZvciBJbnRlbCdz
IHZHUFUgbWRldgpkZXZpY2VzLgoKdmVyc2lvbiBhdHRyaWJ1dGUgaXMgcncuCkl0J3MgdXNlZCB0
byBjaGVjayBkZXZpY2UgY29tcGF0aWJpbGl0eSBmb3IgdHdvIG1kZXYgZGV2aWNlcy4KdmVyc2lv
biBzdHJpbmcgZm9ybWF0IGFuZCBsZW5ndGggYXJlIHByaXZhdGUgZm9yIHZlbmRvciBkcml2ZXIu
IHZlbmRvcgpkcml2ZXIgaXMgYWJsZSB0byBkZWZpbmUgdGhlbSBmcmVlbHkuCgpGb3IgSW50ZWwg
dkdQVSBvZiBnZW44IGFuZCBnZW45LCB0aGUgbWRldiBkZXZpY2UgdmVyc2lvbgpjb25zaXN0cyBv
ZiAzIGZpZWxkczogInZlbmRvciBpZCIgKyAiZGV2aWNlIGlkIiArICJtZGV2IHR5cGUiLgoKUmVh
ZGluZyBmcm9tIGEgdkdQVSdzIHZlcnNpb24gYXR0cmlidXRlLCBhIHN0cmluZyBpcyByZXR1cm5l
ZCBpbiBiZWxvdwpmb3JtYXQ6IDx2ZW5kb3IgaWQ+LTxkZXZpY2UgaWQ+LTxtZGV2IHR5cGU+LiBl
LmcuCjgwODYtMTkzYi1pOTE1LUdWVGdfVjVfMi4KCldyaXRpbmcgYSBzdHJpbmcgdG8gYSB2R1BV
J3MgdmVyc2lvbiBhdHRyaWJ1dGUgd2lsbCB0cmlnZ2VyIEdWVCB0byBjaGVjawp3aGV0aGVyIGEg
dkdQVSBpZGVudGlmaWVkIGJ5IHRoZSB3cml0dGVuIHN0cmluZyBpcyBjb21wYXRpYmxlIHdpdGgK
Y3VycmVudCB2R1BVIG93bmluZyB0aGlzIHZlcnNpb24gYXR0cmlidXRlLiBlcnJubyBpcyByZXR1
cm5lZCBpZiB0aGUgdHdvCnZHUFVzIGFyZSBpbmNvbXBhdGlibGUuIFRoZSBsZW5ndGggb2Ygd3Jp
dHRlbiBzdHJpbmcgaXMgcmV0dXJuZWQgaW4KY29tcGF0aWJsZSBjYXNlLgoKRm9yIG90aGVyIHBs
YXRmb3JtcywgYW5kIGZvciBHVlQgbm90IHN1cHBvcnRpbmcgdkdQVSBsaXZlIG1pZ3JhdGlvbgpm
ZWF0dXJlLCBlcnJub3MgYXJlIHJldHVybmVkIHdoZW4gcmVhZC93cml0ZSBvZiBtZGV2IGRldmlj
ZXMnIHZlcnNpb24KYXR0cmlidXRlcy4KCkZvciBvbGQgR1ZUIHZlcnNpb25zIHdoZXJlIG5vIHZl
cnNpb24gYXR0cmlidXRlcyBleHBvc2VkIGluIHN5c2ZzLCBpdCBpcwpyZWdhcmRlZCBhcyBub3Qg
c3VwcG9ydGluZyB2R1BVIGxpdmUgbWlncmF0aW9uLgoKRm9yIGZ1dHVyZSBwbGF0Zm9ybXMsIGJl
c2lkZXMgdGhlIGN1cnJlbnQgMiBmaWVsZHMgaW4gdmVuZG9yIHByb3ByaWV0YXJ5CnBhcnQsIG1v
cmUgZmllbGRzIG1heSBiZSBhZGRlZCB0byBpZGVudGlmeSBJbnRlbCB2R1BVIHdlbGwgZm9yIGxp
dmUKbWlncmF0aW9uIHB1cnBvc2UuCgp2MjoKMS4gcmVtb3ZlZCAzMiBjb21tb24gcGFydCBvZiB2
ZXJzaW9uIHN0cmluZwooQWxleCBXaWxsaWFtc29uKQoyLiBkbyBub3QgcmVnaXN0ZXIgdmVyc2lv
biBhdHRyaWJ1dGUgZm9yIEdWVCBub3Qgc3VwcG9ydGluZyBsaXZlCm1pZ3JhdGlvbi4oQ29ybmVs
aWEgSHVjaykKMy4gZm9yIHBsYXRmb3JtcyBvdXQgb2YgZ2VuOCwgZ2VuOSwgcmV0dXJuIC1FSU5W
QUwgLS0+IC1FTk9ERVYgZm9yCmluY29tcGF0aWJsZS4gKENvcm5lbGlhIEh1Y2spCgpDYzogQWxl
eCBXaWxsaWFtc29uIDxhbGV4LndpbGxpYW1zb25AcmVkaGF0LmNvbT4KQ2M6IEVyaWsgU2t1bHRl
dHkgPGVza3VsdGV0QHJlZGhhdC5jb20+CkNjOiAiRHIuIERhdmlkIEFsYW4gR2lsYmVydCIgPGRn
aWxiZXJ0QHJlZGhhdC5jb20+CkNjOiBDb3JuZWxpYSBIdWNrIDxjb2h1Y2tAcmVkaGF0LmNvbT4K
Q2M6ICJUaWFuLCBLZXZpbiIgPGtldmluLnRpYW5AaW50ZWwuY29tPgpDYzogWmhlbnl1IFdhbmcg
PHpoZW55dXdAbGludXguaW50ZWwuY29tPgpDYzogIldhbmcsIFpoaSBBIiA8emhpLmEud2FuZ0Bp
bnRlbC5jb20+CmM6IE5lbyBKaWEgPGNqaWFAbnZpZGlhLmNvbT4KQ2M6IEtpcnRpIFdhbmtoZWRl
IDxrd2Fua2hlZGVAbnZpZGlhLmNvbT4KClNpZ25lZC1vZmYtYnk6IFlhbiBaaGFvIDx5YW4ueS56
aGFvQGludGVsLmNvbT4KLS0tCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9ndnQvTWFrZWZpbGUgICAg
ICAgICB8ICAyICstCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9ndnQvZGV2aWNlX3ZlcnNpb24uYyB8
IDg3ICsrKysrKysrKysrKysrKysrKysrKysrCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9ndnQvZ3Z0
LmMgICAgICAgICAgICB8IDUxICsrKysrKysrKysrKysKIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2d2
dC9ndnQuaCAgICAgICAgICAgIHwgIDYgKysKIDQgZmlsZXMgY2hhbmdlZCwgMTQ1IGluc2VydGlv
bnMoKyksIDEgZGVsZXRpb24oLSkKIGNyZWF0ZSBtb2RlIDEwMDY0NCBkcml2ZXJzL2dwdS9kcm0v
aTkxNS9ndnQvZGV2aWNlX3ZlcnNpb24uYwoKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9p
OTE1L2d2dC9NYWtlZmlsZSBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d2dC9NYWtlZmlsZQppbmRl
eCAyNzFmYjQ2ZDRkZDAuLjU0ZTIwOWEyMzg5OSAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJt
L2k5MTUvZ3Z0L01ha2VmaWxlCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d2dC9NYWtlZmls
ZQpAQCAtMyw3ICszLDcgQEAgR1ZUX0RJUiA6PSBndnQKIEdWVF9TT1VSQ0UgOj0gZ3Z0Lm8gYXBl
cnR1cmVfZ20ubyBoYW5kbGVycy5vIHZncHUubyB0cmFjZV9wb2ludHMubyBmaXJtd2FyZS5vIFwK
IAlpbnRlcnJ1cHQubyBndHQubyBjZmdfc3BhY2UubyBvcHJlZ2lvbi5vIG1taW8ubyBkaXNwbGF5
Lm8gZWRpZC5vIFwKIAlleGVjbGlzdC5vIHNjaGVkdWxlci5vIHNjaGVkX3BvbGljeS5vIG1taW9f
Y29udGV4dC5vIGNtZF9wYXJzZXIubyBkZWJ1Z2ZzLm8gXAotCWZiX2RlY29kZXIubyBkbWFidWYu
byBwYWdlX3RyYWNrLm8KKwlmYl9kZWNvZGVyLm8gZG1hYnVmLm8gcGFnZV90cmFjay5vIGRldmlj
ZV92ZXJzaW9uLm8KIAogY2NmbGFncy15CQkJCSs9IC1JJChzcmMpIC1JJChzcmMpLyQoR1ZUX0RJ
UikKIGk5MTUteQkJCQkJKz0gJChhZGRwcmVmaXggJChHVlRfRElSKS8sICQoR1ZUX1NPVVJDRSkp
CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndnQvZGV2aWNlX3ZlcnNpb24uYyBi
L2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d2dC9kZXZpY2VfdmVyc2lvbi5jCm5ldyBmaWxlIG1vZGUg
MTAwNjQ0CmluZGV4IDAwMDAwMDAwMDAwMC4uYmQ0Y2RjYmRiYTk1Ci0tLSAvZGV2L251bGwKKysr
IGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3Z0L2RldmljZV92ZXJzaW9uLmMKQEAgLTAsMCArMSw4
NyBAQAorLyoKKyAqIENvcHlyaWdodChjKSAyMDExLTIwMTcgSW50ZWwgQ29ycG9yYXRpb24uIEFs
bCByaWdodHMgcmVzZXJ2ZWQuCisgKgorICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwg
ZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKKyAqIGNvcHkgb2YgdGhp
cyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3
YXJlIiksCisgKiB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBp
bmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uCisgKiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwg
bW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwKKyAqIGFuZC9v
ciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3
aG9tIHRoZQorICogU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRo
ZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKKyAqCisgKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGlj
ZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSAoaW5jbHVkaW5nIHRoZSBuZXh0CisgKiBwYXJh
Z3JhcGgpIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9y
dGlvbnMgb2YgdGhlCisgKiBTb2Z0d2FyZS4KKyAqCisgKiBUSEUgU09GVFdBUkUgSVMgUFJPVklE
RUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgorICog
SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBN
RVJDSEFOVEFCSUxJVFksCisgKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQg
Tk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwKKyAqIFRIRSBBVVRIT1JTIE9SIENP
UFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVS
CisgKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9S
IE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLAorICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lU
SCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUKKyAqIFNP
RlRXQVJFLgorICoKKyAqIEF1dGhvcnM6CisgKiAgICBZYW4gWmhhbyA8eWFuLnkuemhhb0BpbnRl
bC5jb20+CisgKi8KKyNpbmNsdWRlIDxsaW51eC92ZmlvLmg+CisjaW5jbHVkZSAiaTkxNV9kcnYu
aCIKKworc3RhdGljIGJvb2wgaXNfY29tcGF0aWJsZShjb25zdCBjaGFyICpzZWxmLCBjb25zdCBj
aGFyICpyZW1vdGUpCit7CisJaWYgKHN0cmxlbihyZW1vdGUpICE9IHN0cmxlbihzZWxmKSkKKwkJ
cmV0dXJuIGZhbHNlOworCisJcmV0dXJuIChzdHJuY21wKHNlbGYsIHJlbW90ZSwgc3RybGVuKHNl
bGYpKSkgPyBmYWxzZSA6IHRydWU7Cit9CisKK3NzaXplX3QgaW50ZWxfZ3Z0X2dldF92ZmlvX2Rl
dmljZV92ZXJzaW9uX2xlbihzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYpCit7CisJ
aWYgKCFJU19HRU4oZGV2X3ByaXYsIDgpICYmICFJU19HRU4oZGV2X3ByaXYsIDkpKQorCQlyZXR1
cm4gLUVOT0RFVjsKKworCXJldHVybiBQQUdFX1NJWkU7Cit9CisKK3NzaXplX3QgaW50ZWxfZ3Z0
X2dldF92ZmlvX2RldmljZV92ZXJzaW9uKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJp
diwKKwkJY2hhciAqYnVmLCBjb25zdCBjaGFyICptZGV2X3R5cGUpCit7CisJaW50IGNudCA9IDAs
IHJldCA9IDA7CisJY29uc3QgY2hhciAqc3RyID0gTlVMTDsKKworCS8qIGN1cnJlbnRseSBvbmx5
IGdlbjggJiBnZW45IGFyZSBzdXBwb3J0ZWQgKi8KKwlpZiAoIUlTX0dFTihkZXZfcHJpdiwgOCkg
JiYgIUlTX0dFTihkZXZfcHJpdiwgOSkpCisJCXJldHVybiAtRU5PREVWOworCisJLyogdmVuZG9y
IGlkICsgZGV2aWNlIGlkICsgbWRldiB0eXBlICovCisJLyogdmVuZG9yIGlkICovCisJY250ID0g
c25wcmludGYoYnVmLCA1LCAiJTA0eCIsIFBDSV9WRU5ET1JfSURfSU5URUwpOworCWJ1ZiArPSBj
bnQ7CisJcmV0ICs9IGNudDsKKworCS8qIGRldmljZSBpZCAqLworCWNudCA9IHNucHJpbnRmKGJ1
ZiwgNiwgIi0lMDR4IiwgSU5URUxfREVWSUQoZGV2X3ByaXYpKTsKKwlidWYgKz0gY250OworCXJl
dCArPSBjbnQ7CisKKwkvKiBtZGV2IHR5cGUgKi8KKwlzdHIgPSBtZGV2X3R5cGU7CisJY250ID0g
c25wcmludGYoYnVmLCBzdHJsZW4oc3RyKSArIDMsICItJXNcbiIsIG1kZXZfdHlwZSk7CisJYnVm
ICs9IGNudDsKKwlyZXQgKz0gY250OworCisJcmV0dXJuIHJldDsKK30KKworc3NpemVfdCBpbnRl
bF9ndnRfY2hlY2tfdmZpb19kZXZpY2VfdmVyc2lvbihzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAq
ZGV2X3ByaXYsCisJCWNvbnN0IGNoYXIgKnNlbGYsIGNvbnN0IGNoYXIgKnJlbW90ZSkKK3sKKwor
CS8qIGN1cnJlbnRseSBvbmx5IGdlbjggJiBnZW45IGFyZSBzdXBwb3J0ZWQgKi8KKwlpZiAoIUlT
X0dFTihkZXZfcHJpdiwgOCkgJiYgIUlTX0dFTihkZXZfcHJpdiwgOSkpCisJCXJldHVybiAtRU5P
REVWOworCisJaWYgKCFpc19jb21wYXRpYmxlKHNlbGYsIHJlbW90ZSkpCisJCXJldHVybiAtRUlO
VkFMOworCisJcmV0dXJuIDA7Cit9CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9n
dnQvZ3Z0LmMgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndnQvZ3Z0LmMKaW5kZXggNDNmNDI0MjA2
MmRkLi4xOWYxNmVlYzVhNGMgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d2dC9n
dnQuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndnQvZ3Z0LmMKQEAgLTEwNSwxNCArMTA1
LDY1IEBAIHN0YXRpYyBzc2l6ZV90IGRlc2NyaXB0aW9uX3Nob3coc3RydWN0IGtvYmplY3QgKmtv
YmosIHN0cnVjdCBkZXZpY2UgKmRldiwKIAkJICAgICAgIHR5cGUtPndlaWdodCk7CiB9CiAKKyNp
ZmRlZiBHVlRfTUlHUkFUSU9OX1ZFUlNJT04KK3N0YXRpYyBzc2l6ZV90IHZlcnNpb25fc2hvdyhz
dHJ1Y3Qga29iamVjdCAqa29iaiwgc3RydWN0IGRldmljZSAqZGV2LAorCQljaGFyICpidWYpCit7
CisJc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUgPSBrZGV2X3RvX2k5MTUoZGV2KTsKKwlj
b25zdCBjaGFyICptZGV2X3R5cGUgPSBrb2JqZWN0X25hbWUoa29iaik7CisKKwlyZXR1cm4gaW50
ZWxfZ3Z0X2dldF92ZmlvX2RldmljZV92ZXJzaW9uKGk5MTUsIGJ1ZiwgbWRldl90eXBlKTsKK30K
Kworc3RhdGljIHNzaXplX3QgdmVyc2lvbl9zdG9yZShzdHJ1Y3Qga29iamVjdCAqa29iaiwgc3Ry
dWN0IGRldmljZSAqZGV2LAorCQljb25zdCBjaGFyICpidWYsIHNpemVfdCBjb3VudCkKK3sKKwlj
aGFyICpyZW1vdGUgPSBOVUxMLCAqc2VsZiA9IE5VTEw7CisJaW50IGxlbiwgcmV0ID0gMDsKKwlz
dHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqaTkxNSA9IGtkZXZfdG9faTkxNShkZXYpOworCWNvbnN0
IGNoYXIgKm1kZXZfdHlwZSA9IGtvYmplY3RfbmFtZShrb2JqKTsKKworCWxlbiA9IGludGVsX2d2
dF9nZXRfdmZpb19kZXZpY2VfdmVyc2lvbl9sZW4oaTkxNSk7CisJaWYgKGxlbiA8IDApCisJCXJl
dHVybiBsZW47CisKKwlzZWxmID0ga21hbGxvYyhsZW4sIEdGUF9LRVJORUwpOworCWlmICghc2Vs
ZikKKwkJcmV0dXJuIC1FTk9NRU07CisKKwlyZXQgPSBpbnRlbF9ndnRfZ2V0X3ZmaW9fZGV2aWNl
X3ZlcnNpb24oaTkxNSwgc2VsZiwgbWRldl90eXBlKTsKKwlpZiAocmV0IDwgMCkKKwkJZ290byBv
dXQ7CisKKwlyZW1vdGUgPSBrc3RybmR1cChidWYsIGNvdW50LCBHRlBfS0VSTkVMKTsKKwlpZiAo
IXJlbW90ZSkgeworCQlyZXQgPSAtRU5PTUVNOworCQlnb3RvIG91dDsKKwl9CisKKwlyZXQgPSBp
bnRlbF9ndnRfY2hlY2tfdmZpb19kZXZpY2VfdmVyc2lvbihpOTE1LCBzZWxmLCByZW1vdGUpOwor
CitvdXQ6CisJa2ZyZWUoc2VsZik7CisJa2ZyZWUocmVtb3RlKTsKKwlyZXR1cm4gKHJldCA8IDAg
PyByZXQgOiBjb3VudCk7Cit9CisjZW5kaWYKKwogc3RhdGljIE1ERVZfVFlQRV9BVFRSX1JPKGF2
YWlsYWJsZV9pbnN0YW5jZXMpOwogc3RhdGljIE1ERVZfVFlQRV9BVFRSX1JPKGRldmljZV9hcGkp
Owogc3RhdGljIE1ERVZfVFlQRV9BVFRSX1JPKGRlc2NyaXB0aW9uKTsKKyNpZmRlZiBHVlRfTUlH
UkFUSU9OX1ZFUlNJT04KK3N0YXRpYyBNREVWX1RZUEVfQVRUUl9SVyh2ZXJzaW9uKTsKKyNlbmRp
ZgogCiBzdGF0aWMgc3RydWN0IGF0dHJpYnV0ZSAqZ3Z0X3R5cGVfYXR0cnNbXSA9IHsKIAkmbWRl
dl90eXBlX2F0dHJfYXZhaWxhYmxlX2luc3RhbmNlcy5hdHRyLAogCSZtZGV2X3R5cGVfYXR0cl9k
ZXZpY2VfYXBpLmF0dHIsCiAJJm1kZXZfdHlwZV9hdHRyX2Rlc2NyaXB0aW9uLmF0dHIsCisjaWZk
ZWYgR1ZUX01JR1JBVElPTl9WRVJTSU9OCisJJm1kZXZfdHlwZV9hdHRyX3ZlcnNpb24uYXR0ciwK
KyNlbmRpZgogCU5VTEwsCiB9OwogCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9n
dnQvZ3Z0LmggYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndnQvZ3Z0LmgKaW5kZXggZjVhMzI4YjUy
OTBhLi40MDYyZjZiMjZhY2YgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d2dC9n
dnQuaAorKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndnQvZ3Z0LmgKQEAgLTY4Nyw2ICs2ODcs
MTIgQEAgdm9pZCBpbnRlbF9ndnRfZGVidWdmc19yZW1vdmVfdmdwdShzdHJ1Y3QgaW50ZWxfdmdw
dSAqdmdwdSk7CiBpbnQgaW50ZWxfZ3Z0X2RlYnVnZnNfaW5pdChzdHJ1Y3QgaW50ZWxfZ3Z0ICpn
dnQpOwogdm9pZCBpbnRlbF9ndnRfZGVidWdmc19jbGVhbihzdHJ1Y3QgaW50ZWxfZ3Z0ICpndnQp
OwogCitzc2l6ZV90IGludGVsX2d2dF9nZXRfdmZpb19kZXZpY2VfdmVyc2lvbihzdHJ1Y3QgZHJt
X2k5MTVfcHJpdmF0ZSAqaTkxNSwKKwkJY2hhciAqYnVmLCBjb25zdCBjaGFyICptZGV2X3R5cGUp
Oworc3NpemVfdCBpbnRlbF9ndnRfY2hlY2tfdmZpb19kZXZpY2VfdmVyc2lvbihzdHJ1Y3QgZHJt
X2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYsCisJCWNvbnN0IGNoYXIgKnNlbGYsIGNvbnN0IGNoYXIg
KnJlbW90ZSk7Citzc2l6ZV90CitpbnRlbF9ndnRfZ2V0X3ZmaW9fZGV2aWNlX3ZlcnNpb25fbGVu
KHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdik7CiAKICNpbmNsdWRlICJ0cmFjZS5o
IgogI2luY2x1ZGUgIm1wdC5oIgotLSAKMi4xNy4xCgpfX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fXwppbnRlbC1ndnQtZGV2IG1haWxpbmcgbGlzdAppbnRlbC1n
dnQtZGV2QGxpc3RzLmZyZWVkZXNrdG9wLm9yZwpodHRwczovL2xpc3RzLmZyZWVkZXNrdG9wLm9y
Zy9tYWlsbWFuL2xpc3RpbmZvL2ludGVsLWd2dC1kZXY=
